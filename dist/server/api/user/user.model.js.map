{"version":3,"sources":["api/user/user.model.js"],"names":["Promise","require","authTypes","UserSchema","name","String","email","type","lowercase","required","indexOf","provider","role","default","password","salt","twitter","github","virtual","get","_id","path","validate","length","value","respond","constructor","findOne","exec","then","user","id","catch","err","validatePresenceOf","pre","next","isModified","Error","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","pwdGen","byteSize","defaultByteSize","arguments","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","model"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\r\n/*eslint no-invalid-this:0*/\r\nimport crypto from 'crypto';\r\nmongoose.Promise = require('bluebird');\r\nimport mongoose, {Schema} from 'mongoose';\r\n\r\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\r\n\r\nvar UserSchema = new Schema({\r\n  name: String,\r\n  email: {\r\n    type: String,\r\n    lowercase: true,\r\n    required() {\r\n      if(authTypes.indexOf(this.provider) === -1) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n  role: {\r\n    type: String,\r\n    default: 'user'\r\n  },\r\n  password: {\r\n    type: String,\r\n    required() {\r\n      if(authTypes.indexOf(this.provider) === -1) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n  provider: String,\r\n  salt: String,\r\n  twitter: {},\r\n  github: {}\r\n});\r\n\r\n/**\r\n * Virtuals\r\n */\r\n\r\n// Public profile information\r\nUserSchema\r\n  .virtual('profile')\r\n  .get(function() {\r\n    return {\r\n      name: this.name,\r\n      role: this.role\r\n    };\r\n  });\r\n\r\n// Non-sensitive info we'll be putting in the token\r\nUserSchema\r\n  .virtual('token')\r\n  .get(function() {\r\n    return {\r\n      _id: this._id,\r\n      role: this.role\r\n    };\r\n  });\r\n\r\n/**\r\n * Validations\r\n */\r\n\r\n// Validate empty email\r\nUserSchema\r\n  .path('email')\r\n  .validate(function(email) {\r\n    if(authTypes.indexOf(this.provider) !== -1) {\r\n      return true;\r\n    }\r\n    return email.length;\r\n  }, 'Email cannot be blank');\r\n\r\n// Validate empty password\r\nUserSchema\r\n  .path('password')\r\n  .validate(function(password) {\r\n    if(authTypes.indexOf(this.provider) !== -1) {\r\n      return true;\r\n    }\r\n    return password.length;\r\n  }, 'Password cannot be blank');\r\n\r\n// Validate email is not taken\r\nUserSchema\r\n  .path('email')\r\n  .validate(function(value, respond) {\r\n    if(authTypes.indexOf(this.provider) !== -1) {\r\n      return respond(true);\r\n    }\r\n\r\n    return this.constructor.findOne({ email: value }).exec()\r\n      .then(user => {\r\n        if(user) {\r\n          if(this.id === user.id) {\r\n            return respond(true);\r\n          }\r\n          return respond(false);\r\n        }\r\n        return respond(true);\r\n      })\r\n      .catch(function(err) {\r\n        throw err;\r\n      });\r\n  }, 'The specified email address is already in use.');\r\n\r\nvar validatePresenceOf = function(value) {\r\n  return value && value.length;\r\n};\r\n\r\n/**\r\n * Pre-save hook\r\n */\r\nUserSchema\r\n  .pre('save', function(next) {\r\n    // Handle new/update passwords\r\n    if(!this.isModified('password')) {\r\n      return next();\r\n    }\r\n\r\n    if(!validatePresenceOf(this.password)) {\r\n      if(authTypes.indexOf(this.provider) === -1) {\r\n        return next(new Error('Invalid password'));\r\n      } else {\r\n        return next();\r\n      }\r\n    }\r\n\r\n    // Make salt with a callback\r\n    this.makeSalt((saltErr, salt) => {\r\n      if(saltErr) {\r\n        return next(saltErr);\r\n      }\r\n      this.salt = salt;\r\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\r\n        if(encryptErr) {\r\n          return next(encryptErr);\r\n        }\r\n        this.password = hashedPassword;\r\n        return next();\r\n      });\r\n    });\r\n  });\r\n\r\n/**\r\n * Methods\r\n */\r\nUserSchema.methods = {\r\n  /**\r\n   * Authenticate - check if the passwords are the same\r\n   *\r\n   * @param {String} password\r\n   * @param {Function} callback\r\n   * @return {Boolean}\r\n   * @api public\r\n   */\r\n  authenticate(password, callback) {\r\n    if(!callback) {\r\n      return this.password === this.encryptPassword(password);\r\n    }\r\n\r\n    this.encryptPassword(password, (err, pwdGen) => {\r\n      if(err) {\r\n        return callback(err);\r\n      }\r\n\r\n      if(this.password === pwdGen) {\r\n        return callback(null, true);\r\n      } else {\r\n        return callback(null, false);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Make salt\r\n   *\r\n   * @param {Number} [byteSize] - Optional salt byte size, default to 16\r\n   * @param {Function} callback\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n  makeSalt(byteSize, callback) {\r\n    var defaultByteSize = 16;\r\n\r\n    if(typeof arguments[0] === 'function') {\r\n      callback = arguments[0];\r\n      byteSize = defaultByteSize;\r\n    } else if(typeof arguments[1] === 'function') {\r\n      callback = arguments[1];\r\n    } else {\r\n      throw new Error('Missing Callback');\r\n    }\r\n\r\n    if(!byteSize) {\r\n      byteSize = defaultByteSize;\r\n    }\r\n\r\n    return crypto.randomBytes(byteSize, (err, salt) => {\r\n      if(err) {\r\n        return callback(err);\r\n      } else {\r\n        return callback(null, salt.toString('base64'));\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Encrypt password\r\n   *\r\n   * @param {String} password\r\n   * @param {Function} callback\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n  encryptPassword(password, callback) {\r\n    if(!password || !this.salt) {\r\n      if(!callback) {\r\n        return null;\r\n      } else {\r\n        return callback('Missing password or salt');\r\n      }\r\n    }\r\n\r\n    var defaultIterations = 10000;\r\n    var defaultKeyLength = 64;\r\n    var salt = new Buffer(this.salt, 'base64');\r\n\r\n    if(!callback) {\r\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\r\n        .toString('base64');\r\n    }\r\n\r\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, (err, key) => {\r\n      if(err) {\r\n        return callback(err);\r\n      } else {\r\n        return callback(null, key.toString('base64'));\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default mongoose.model('User', UserSchema);\r\n"]}